;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(exwm-workspace--switch-history input-method-history read-expression-history search-ring org-link--history goto-line-history tmm--history shell-command-history command-history calc-extended-command-history eww-prompt-history xref--read-identifier-history read-char-history read-number-history org-tags-history read-from-kill-ring-history yes-or-no-p-history buffer-name-history minibuffer-history extended-command-history file-name-history))
(setq exwm-workspace--switch-history '(#("[0] 1  2  3 " 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil)) #(" 0 [1] 2  3 " 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil)) #(" 0  1 [2] 3 " 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil)) #(" 0  1  2 [3]" 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil))))
(setq read-expression-history '("(setq org-confirm-babel-evaluate nil)"))
(setq search-ring '(#("EXw" 0 3 (isearch-case-fold-search nil isearch-regexp-function nil)) #("exwm" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("beg" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("backend" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("bac" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("send" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("efs" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("works" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("workspac" 0 8 (isearch-case-fold-search t isearch-regexp-function nil)) #("obje" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("mater" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("ob" 0 2 (isearch-case-fold-search t isearch-regexp-function nil)) #("obj" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("Les" 0 3 (isearch-case-fold-search nil isearch-regexp-function nil)) #("begi" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("adv" 0 3 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq tmm--history '("h==>Help" "i==>Image" "d==>DocView" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq shell-command-history '("pamixer -i 20" "pamixer -u" "firefox " "pamixer -m" "pamixer -d 20" "pamixer -u" "signal-desktop " "date" "pamixer -m" "firefox " "pamixer -m" "pamixer -u" "pamixer -m" "signal-desktop " "firefox " "passmenu " "firefox " "date" "firefox " "signal-desktop " "firefox " "pamixer -m" "signal-desktop " "firefox " "discord "))
(setq command-history '(((lambda (command) (interactive (list (read-shell-command "$ "))) (start-process-shell-command command nil command)) "pamixer -i 20") ((lambda (command) (interactive (list (read-shell-command "$ "))) (start-process-shell-command command nil command)) "pamixer -i 20") ((lambda (command) (interactive (list (read-shell-command "$ "))) (start-process-shell-command command nil command)) "pamixer -u") ((lambda (command) (interactive (list (read-shell-command "$ "))) (start-process-shell-command command nil command)) "firefox ") (switch-to-buffer "*GNU Guile - Wikipedia # eww*" nil 'force-same-window) (switch-to-buffer "Firefox: An Introduction to GNU Guix - YouTube — Mozilla Firefox" nil 'force-same-window) (switch-to-buffer "*vterm*" nil 'force-same-window) (switch-to-buffer "Signal" nil 'force-same-window) ((lambda (command) (interactive (list (read-shell-command "$ "))) (start-process-shell-command command nil command)) "pamixer -m") (switch-to-buffer "Firefox: Northernlion - YouTube — Mozilla Firefox" nil 'force-same-window) (switch-to-buffer "Signal" nil 'force-same-window) (switch-to-buffer "*GNU Guile - Wikipedia # eww*" nil 'force-same-window) (eww "Scheme vs Guilde" nil) (execute-extended-command nil "eww" "eww") (execute-extended-command nil "eww" "eww") (switch-to-buffer "*scratch*" nil 'force-same-window) (eww-open-in-new-buffer) (execute-extended-command nil "eww-open-in-new-buffer" "ewwnew") (eww "what is Guile steam" nil) (execute-extended-command nil "eww") (eww "what is Guile Scheme" nil) (eww "I love arch but GNU Guix" nil) (switch-to-buffer "*Interpretations and critiques | Protesil # eww*" nil 'force-same-window) (switch-to-buffer "Firefox: I Love Arch But Gnu Guix Is My New Distro — Mozilla Firefox" nil 'force-same-window) (switch-to-buffer "Firefox: Mozilla Firefox" nil 'force-same-window)))
(setq eww-prompt-history '("Scheme vs Guilde" "what is Guile steam" "what is Guile Scheme" "I love arch but GNU Guix" "prot emacs" "emacs contacts adressbook" "its and and we're here to say voicemail" "pipe linux terminal screensaver" "prot emacs" "libgen.is" "reddit.com/r/nba" "flat white" "mewflaw" "reddit.com/r/books" "classroom.google.com" "youtube.com"))
(setq read-char-history '("/"))
(setq read-number-history '("2" "j" "1" "^"))
(setq org-tags-history '("export" "slides" "notes" "slides"))
(setq yes-or-no-p-history '("yes" "tes" "yes" "no" "no]" "no" "yes" " yes" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "es" "y" "yes"))
(setq buffer-name-history '("*GNU Guile - Wikipedia # eww*" "Firefox: An Introduction to GNU Guix - YouTube — Mozilla Firefox" "*vterm*" "Signal" "Firefox: Northernlion - YouTube — Mozilla Firefox" "Signal" "*GNU Guile - Wikipedia # eww*" "*scratch*" "*Interpretations and critiques | Protesil # eww*" "Firefox: I Love Arch But Gnu Guix Is My New Distro — Mozilla Firefox" "Firefox: Mozilla Firefox" "Signal" "Firefox: EXWM - ArchWiki — Mozilla Firefox" "*Interpretations and critiques | Protesil # eww*" "Firefox: EXWM - ArchWiki — Mozilla Firefox" "Firefox: YouTube — Mozilla Firefox" "*vterm*" "Firefox: Inbox - joshcooperman-earl@lclark.edu - Lewis & Clark College Mail — Mozilla Firefox" "systemd-logind" "Firefox: logind.conf(5) - Linux manual page — Mozilla Firefox" "Firefox: [hyprland] yet another hyprland rice : r/unixporn — Mozilla Firefox" "*vterm*" "Firefox: Why are regular non-invested people so scared of Linux? What can be changed to improve the attitude towards Linux? : r/linux — Mozilla Firefox" "Firefox: NBA — Mozilla Firefox" "Signal"))
(setq minibuffer-history '("magit" "olivetti-20241030.542" "olivetti" "vterm" "bongo-20201002.1020" "bongo" "bongo-20201002.1020" "bongo" "exwm" "exwm-0.33" "yes" "0.4" "0.5" "yes" "0.5" "yes" "DeepL" "buffer" "line" "disable" "paragraph" "word" "DeepL" "buffer" "nil"))
(setq extended-command-history '("eww" "eww-open-in-new-buffer" "eww" "vterm" "eww" "vterm" "vterm-other-window" "vterm" "eww" "vterm" "eww" "vterm" "exwm-layout-toggle-mode-line" "vterm" "package-delete" "package-install" "package-delete" "olivetti-mode" "package-install" "window-swap-states" "windmove-right" "gnus" "vterm" "load-file" "sieve-upload-and-bury"))
(setq file-name-history '("/usr/lib/systemd/systemd-logind" "/etc/systemd/logind.conf" "~/Documents/org/Under the Violent Sky.org" "~/Documents/org/bookmarks.org" "~/Documents/org/Under the Violent Sky.org" "~/Documents/" "~/Documents/org/Under the Violent Sky.org" "~/Documents/org/bookmarks.org" "~/.newsboat/" "~/Documents/org/algebra1/alg1-021325.org" "~/Documents/org/Under the Violent Sky.org" "~/.emacs.d/configuration.org" "~/.emacs.d/init.el" "~/.emacs.d/configuration.org" "~/.xinitrc" "~/.emacs.d/configuration.org" "~/Music/" "~/Documents/org/algebra1/alg1-021325.org" "~/.emacs.d/configuration.org" "~/Music/" "~/.emacs.d/configuration.org" "~/.emacs.d/init.el" "~/.emacs.d/configuration.org" "~/.xinitrc" "~/.emacs.d/configuration.org"))
