#+TITLE: Configuration, or, my new addiction

* Why emacs, why org?
* Dependencies
To use these things as intended you will need the following pacman packages:
- aspell
- aspell-en
- gnuplot
- texlive-bin
n- texlive-latex
- texlive-latexextra
- texlive-plaingeneric
* Packages and Repositories
** Package Setup
From what I've been told, these are the ones that you have to have to get started. I think I could delete most of these and the archive priorities section but I copied this from some random guy and now I'm too afraid to change it and break something. I mostly do not install packages anyways.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
        '(("GNU ELPA"     . "https://elpa.gnu.org/packages/")
  	("MELPA"        . "https://melpa.org/packages/")))
  (package-initialize)
#+end_src
** Evil Mode
Initially I used evil mode. I cannot say that prior to this Emacs adventure I was a true "vim user" but rather that I had gotten decently used to "vim-like" keybindings through programs like cmus and newsboat as well as things like vimium and my keybinds for i3. I was convinced by a series of guides and my experiences in info-mode to at least learn the default keybindings and so far I have not gone back.
#+begin_src emacs-lisp
;;(unless (package-installed-p 'evil)
;;  (package-install 'evil))
;;(require 'evil)
;;(evil-mode 1)
;;(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
#+end_src
** Vertico and Marginalia
I was fairly satisfied with the default minibuffer completion in Emacs but was convinced to try these ones out. They are definitely upgrades and better than default but true minimalists could certainly go without. Maybe I will feel differently as my org directory baloons but as of now they are mostly "nice-to-haves."
#+begin_src emacs-lisp
(setq completion-styles '(partial-completion substring flex))
(unless (package-installed-p 'vertico)
  (with-demoted-errors "%s"
	(unless package-archive contents
		(package-refresh-contents))
	(package-install 'vertico)))
(with-demoted-errors "%s" (vertico-mode +1))

(unless (package-installed-p 'marginalia)
  (with-demoted-errors "%s"
    (unless package-archive-contents
      (package-refresh-contents))
    (package-install 'marginalia)))
(with-demoted-errors "%s" (marginalia-mode +1))
#+end_src
** Avy
While I haven't totally built this in yet it seems incredibly useful to be able to switch to a different part of another window in a single function. The potential here seems high so we will see if I can adjust to this as my main way of moving around the frame.

I got rid of this an attempt to get better at using isearch.

(global-set-key (kbd "M-j") 'avy-goto-char-timer)

** Nov
If we can't read in Emacs what's it even for???
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
** Eww
Turn off cookies entirely to continue being a Luddite.
#+begin_src emacs-lisp
(setq url-cookie-untrusted-urls '(".*"))
#+end_src
** EXWM
I stopped using this for the time being. I am going to set up StumpWM on the Guix installer and the single threading is a pain when exporting my teaching slideshows because it makes me unable to use anything else at the same time. I may be back on this laptop eventually but for now I'm back to dwm.

This sets up the necessary things to make Emacs into my window manager. I have nested the whole thing inside of a check for graphic environment so I can still open up in --nw mode if I need to in the tty and get things done without getting annoying popups. The first two functions make the buffer names not all just say "EXWM" ad the rest is just keybinding things. I am enjoying getting to use my keybindings in all apps! We will see if I stick with it, maybe will only on the laptop because I don't have too much of a need to do things other than Emacs and web browsing most of the time.

#+begin_src emacs-lisp



  (defun exwm-update-class ()
                          (exwm-workspace-rename-buffer exwm-class-name))

  (defun exwm-update-title ()
                                  (pcase exwm-class-name
                                    ("LibreWolf" (exwm-workspace-rename-buffer (format "Librewolf: %s" exwm-title)))
                                    ("firefox" (exwm-workspace-rename-buffer (format "Firefox: %s" exwm-title)))))
(when (display-graphic-p)
                          (use-package exwm
                                  :config
                                  ;; Set the default number of workspaces
                                  (setq exwm-workspace-number 1)

                                  (add-hook 'exwm-update-class-hook 'exwm-update-class)

                                  (add-hook 'exwm-update-title-hook 'exwm-update-title)

                                  ;; These keys should always pass through to Emacs
                                  (setq exwm-input-prefix-keys
                                    '(?\C-x
                                      ?\C-u
                                      ?\C-h
                                      ?\M-x
                                      ?\M-`
                                      ?\M-&
                                      ?\M-:
                                      ?\C-\M-j  ;; Buffer list
                                      ?\C-\ ))  ;; Ctrl+Space

                                  ;; Ctrl+Q will enable the next key to be sent directly
                                  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

                                  ;; Set up global key bindings.  These always work, no matter the input state!
                                  ;; Keep in mind that changing this list after EXWM initializes has no effect.
                                  (setq exwm-input-global-keys
                                        `(
                                          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
                                          ([?\s-r] . exwm-reset)

                                          ;; Move between windows
                                          ([?\s-b] . windmove-left)
                                          ([?\s-f] . windmove-right)
                                          ([?\s-p] . windmove-up)
                                          ([?\s-n] . windmove-down)

                                          ;; Launch applications via shell command
                                          ([?\s-d] . (lambda (command)
                                                       (interactive (list (read-shell-command "$ ")))
                                                       (start-process-shell-command command nil command)))

                                          ;; Switch workspace
                                          ([?\s-w] . exwm-workspace-switch)

                                          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
                                          ,@(mapcar (lambda (i)
                                                      `(,(kbd (format "s-%d" i)) .
                                                        (lambda ()
                                                          (interactive)
                                                          (exwm-workspace-switch-create ,i))))
                                                    (number-sequence 0 9))
                                        ))
                                  (setq exwm-input-simulation-keys
                                        '(
                                          ([?\C-b] . [left])
                                          ([?\M-b] . [C-left])
                                          ([?\C-f] . [right])
                                          ([?\M-f] . [C-right])
                                          ([?\C-p] . [up])
                                          ([?\C-n] . [down])
                                          ([?\C-a] . [home])
                                          ([?\C-e] . [end])
                                          ([?\M-v] . [prior])
                                          ([?\C-v] . [next])
                                          ([?\C-d] . [delete])
                                          ([?\M-d] . [S-end delete])
                                          ([?\C-k] . [S-end delete])
                                          ([?\C-w] . [?\C-x])
                                          ([?\M-w] . [?\C-c])
                                          ([?\C-y] . [?\C-v])
                                          ([?\C-/] . [?\C-z])
                                          ([?\C-g] . [?\C-c])))

                                  (exwm-enable)))
#+end_src
** EMMS
#+begin_src emacs-lisp
  (emms-all)
  (setq emms-player-list '(emms-player-mpv)
        emms-info-functions '(emms-info-native))
  (define-key dired-mode-map "\C-c\C-m" 'emms-add-dired)
  (define-key global-map "\C-cm" 'emms)
#+end_src

** Cleaning Up Installed Packages
The custom variables section is ugly as hell and I didn't want it in my init any longer. This here puts it somewhere I will never remember to look at so I don't have to worry my pretty little head any longer.
#+begin_src emacs-lisp
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)
#+end_src
* UI and Theming
** Font
I am trying a new font
#+begin_src emacs-lisp
  (set-frame-font "Commit Mono-10")
#+end_src
** Minimalism
These settings all but guarantee that my Emacs will be unusable to any stranger that happens upon it. I will argue that it is simply there to clean up the visual space to make me "more efficient" or some nonsense like that. Minimalism for minimalism's sake.
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (blink-cursor-mode 0)
  (setq use-file-dialog nil use-dialog-box nil)
#+end_src
** Theme
This is my current preferred theme although I think that I would rather start changing things up. Right now this is how my whole operating system is arranged so I'll stick with it.

I have now changed to prot's built in modus-vivendi which is nice. This block customizes it and changes to the tinted version. 
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi-tinted t)
  (setq modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted))
  (define-key global-map "\C-z" 'modus-themes-toggle)
  (global-set-key (kbd "C-x C-z") nil)
#+end_src
The last line there is because I kept accidentally suspending emacs and ruining my own life
*** Old
  ;; Theming
(when (display-graphic-p)
  (load-theme 'catppuccin :no-confirm)
  (setq catppuccin-flavor 'frappe)
  (catppuccin-reload))
** Mode Line
#+begin_src emacs-lisp
    (setq mode-line-format
                '("%e"
                  (:eval (format (propertize " %s" 'face 'bold) (buffer-name)))
                  ))

    (kill-local-variable 'mode-line-format)

    (force-mode-line-update)
#+end_src
** UI and Behavior Fixing
For some reason this makes scrolling off the bottom only scroll one line at a time. 
#+begin_src emacs-lisp
  (setq scroll-conservatively 100000)
#+end_src

* So-called Modes
** Mode Hooks
*** Abbrev
This makes Abbrev mode be on in almost every mode. I do not use this yet but might get used to it as we go.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'abbrev-mode)
(add-hook 'prog-mode-hook 'abbrev-mode)
#+end_src
*** Line Highlighting
Stole this from the book I read and they said that line highlighting is helpful in these modes that I don't really use.
#+begin_src emacs-lisp
(add-hook 'occur-mode-hook 'hl-line-mode)
(add-hook 'dired-mode-hook 'hl-line-mode)
(add-hook 'package-menu-mode-hook 'hl-line-mode)
#+end_src
*** Spell Checking
This mode is useless because I do not make mistakes.
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+end_src
*** Dired Mode
This does something allegedly helpful to dired mode but I do not know what. I am very trusting.
#+begin_src emacs-lisp
(setq dired-dwim-target t)
(add-hook 'dired-load-hook (lambda () (require 'dired-x)))
#+end_src
*** Auto Revert
Keep documents updated with the changes you are making.
#+begin_src emacs-lisp
(setq view-read-only t)
(add-hook 'doc-view-mode-hook 'auto-revert-mode)
(add-hook 'pdf-view-mode-hook 'auto-revert-mode)
#+end_src
*** Geiser and Paredit
#+begin_src emacs-lisp
(add-hook 'scheme-mode-hook 'paredit-mode)
#+end_src
** Minor Modes
*** Save Place
Please send me back to where I was at last time.
#+begin_src emacs-lisp
(save-place-mode +1)
#+end_src
*** Minibuffer History
This will hopefully mean I never have to retype the things I want to do or the places I want to go. In addition I have added ways to save my registers and kill ring between sessions.
#+begin_src emacs-lisp
  (setq history-length 25)
   (savehist-mode 1)
   (setq savehist-additional-variables '(register-alist kill-ring))
#+end_src
* Keybindings
There is nothing here..yet
* Org and Its Accoutrement
** Package Setup
To configure and use org we must enable it. We also would like emacs to default to using it in the scratch buffer on startup.
#+begin_src emacs-lisp
  (require 'org)
  (setq initial-major-mode 'org-mode)
#+end_src
** Org Tempo
This package allows us to insert code blocks easily with "<" snippets. 
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src
*** Snippet List
This defines which snippets are included. I have added the gnuplot line to make it easier to set up graphs for presentations.
#+begin_src emacs-lisp
  (setq org-structure-template-alist
         '(("s" . "src")
           ("scm" . "src scheme")
           ("sg" . "src gnuplot :eval yes :file graph.png")
           ("e" . "src emacs-lisp")
           ("x" . "example")
           ("X" . "export")
           ("q" . "quote")))
#+end_src

** Agenda
*** Directory
We must set which directory the angenda should look for todos in.
#+begin_src emacs-lisp
(setq org-agenda-files '("~/Documents/org"))
#+end_src
*** Set Options for Todos
We have put in what states we want tasks to be defined as. 
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "PLANNING(p)" "IN-PROGRESS(i@/!)" "|" "DONE(d!)" "WONT-DO(w@/!)" )
        ))
#+end_src
*** Marking Things Done
This puts in the time that a Todo gets finished. I don't think I care about this. Future Josh, next time you see this note consider deleting this block.
#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src
** Org Mode Setup
*** Automatic File Selection
We would like if .org files were opened in org-mode.
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+end_src
*** Org Mode Hook
We want good indentation and line wrapping to work the way I expect.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
#+end_src
*** Key Binds
Important org-mode keybindings set to easy to hit keys.
#+begin_src emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
  (define-key org-mode-map "\C-cf" 'org-metaright)
  (define-key org-mode-map "\C-cb" 'org-metaleft)
  (define-key org-mode-map "\C-cn" 'org-metadown)
  (define-key org-mode-map "\C-cp" 'org-metaup)
#+end_src

*** Capture Templates
These templates were stolen from my initial org tutorial. I like the notes one but could definitely make the task one better.
#+begin_src emacs-lisp
(setq org-capture-templates
      '(    
        ("g" "General To-Do"
         entry (file+headline "~/Documents/org/todos.org" "General Tasks")
         "* TODO [#B] %?\n:Created: %T\n "
         :empty-lines 0)
	("n" "Note"
         entry (file+headline "~/Documents/org/notes.org" "Random Notes")
         "** %?"
         :empty-lines 0)
	))
#+end_src
*** Tags
Setting what tags I can give to headings. I could be making better use of these for sure. 
#+begin_src emacs-lisp
  (setq org-tag-alist '(
                        ("lesson" . ?l)
                        ("slides" . ?s)
                        ("export" . ?e)
                        ("noexport" . ?n)
                        ))
#+end_src
*** Org-babel
This block sets up gnuplot babel blocks.
#+begin_src emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((gnuplot . t)))

      (org-babel-do-load-languages
       'org-babel-load-languages
       '((scheme . t)))
#+end_src
* Josh's Special Section
NOT ANYMORE: This function is what replaces italics with LaTeX blanks and then reverts the file after export. After we bind the key for easy exportation.
#+begin_src emacs-lisp
  (defun org-teacher-export ()
    "export as pdf handout and slideshow with blank spaces for vocabulary"
    (interactive)
    (save-buffer)
    (let (
          (obj-dir "~/Documents/org/materials")
          (filename-stem (file-name-sans-extension (expand-file-name (concat "~/Documents/org/materials/" (buffer-name)))))
          (filename (file-name-sans-extension buffer-file-name))
          )
      (setq org-confirm-babel-evaluate nil)
      (org-export-to-file 'beamer (concat filename-stem "_slides.tex"))
      (org-latex-compile (concat  filename-stem "_slides.tex"))
      
      ; The section below is for exporting handouts. I am not currently doing that so it's commented to increase export speed
      ;(beginning-of-buffer)
      ;(search-forward "Goet" nil t)
      ;(org-beginning-of-line)
      ;(org-kill-line)
      ;(org-export-to-file 'latex (concat filename-stem "_handout.tex"))
      ;(org-latex-compile (concat filename-stem "_handout.tex"))
      
      (setq org-confirm-babel-evaluate t)
      (revert-buffer nil t)))


  (define-key org-mode-map (kbd "C-c t") 'org-teacher-export)
#+end_src
* Testing
