;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(erc-nick-history-list erc-server-history-list exwm-workspace--switch-history input-method-history read-expression-history search-ring org-link--history goto-line-history tmm--history shell-command-history command-history calc-extended-command-history eww-prompt-history xref--read-identifier-history read-char-history read-number-history org-tags-history read-from-kill-ring-history yes-or-no-p-history buffer-name-history minibuffer-history extended-command-history file-name-history))
(setq erc-nick-history-list '("coopEarl" "josh" "joshCoop" "Coop"))
(setq erc-server-history-list '("irc.libera.chat"))
(setq exwm-workspace--switch-history '(#("[0] 1  2  3 " 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil)) #(" 0 [1] 2  3 " 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil)) #(" 0  1 [2] 3 " 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil)) #(" 0  1  2 [3]" 1 2 (face #1=(:foreground "green")) 4 5 (face #1#) 7 8 (face nil) 10 11 (face nil))))
(setq read-expression-history '("(setq org-confirm-babel-evaluate nil)"))
(setq search-ring '(#("hook" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("scratch" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #(";;" 0 2 (isearch-case-fold-search t isearch-regexp-function nil)) #("mod" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("modus" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("modu" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("nov" 0 3 (isearch-case-fold-search t isearch-regexp-function nil)) #("prot" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("mode" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("theme" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("catppuc" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("context" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("conte" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("contex" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("margin" 0 6 (isearch-case-fold-search t isearch-regexp-function nil)) #("exwm" 0 4 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq tmm--history '("h==>Help" "i==>Image" "d==>DocView" "t==>Tools" "b==>Buffers" "o==>Options" "e==>Edit" "f==>File"))
(setq shell-command-history '("bash ~/scripts/keyboardfix.sh " "firefox " "discord " "firefox " "discord " "pamixer -m" "firefox " "pamixer -d 20" "mupdf ~/Documents/org/materials/alg1-021825_slides.pdf " "discord " "firefox " "signal-desktop " "pamixer -d 10" "pwd" "ls" "discord " "scrot -s -f" "firefox " "discord " "discord" "discord " "firefox " "fire" "firefox " "date"))
(setq command-history '((switch-to-buffer "configuration.org" nil 'force-same-window) (dired "~/guix-project/config/packages/" nil) (kill-buffer "emacs.scm") (kill-buffer "*Geiser Guile REPL*") (kill-buffer "*Geiser Guile REPL*<2>") (geiser-guile) (execute-extended-command nil "geiser-guile" "geiser") (geiser 'guile) (execute-extended-command nil "geiser") (kill-buffer "*Geiser Guile REPL*") (geiser 'guile) (execute-extended-command nil "geiser" "geis") (switch-to-buffer "home-config.scm" nil 'force-same-window) (kill-buffer "Libera.Chat") (switch-to-buffer "Libera.Chat" nil 'force-same-window) (kill-buffer "libe") (switch-to-buffer "libe" nil 'force-same-window) (kill-buffer "Libera.Chat/josh`") (erc ':server "irc.libera.chat" ':port 6667 ':nick "coopEarl" ':password nil) (execute-extended-command nil "erc" "erc") (erc ':server "irc.libera.chat" ':port 6667 ':nick "josh" ':password nil) (execute-extended-command nil "erc") (execute-extended-command nil "erc" "erc") (switch-to-buffer "emacs.scm" nil 'force-same-window) (find-file "~/guix-project/config/packages/emacs.scm" t)))
(setq eww-prompt-history '("balena etcher linux" "Scheme vs Guilde" "what is Guile steam" "what is Guile Scheme" "I love arch but GNU Guix" "prot emacs" "emacs contacts adressbook" "its and and we're here to say voicemail" "pipe linux terminal screensaver" "prot emacs" "libgen.is" "reddit.com/r/nba" "flat white" "mewflaw" "reddit.com/r/books" "classroom.google.com" "youtube.com"))
(setq read-char-history '("/"))
(setq read-number-history '("2" "j" "1" "^"))
(setq org-tags-history '("export" "slides" "notes" "slides"))
(setq yes-or-no-p-history '("yes" "tes" "yes" "tes" "yes" "no" "no]" "no" "yes" " yes" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "no" "yes" "es" "y" "yes"))
(setq buffer-name-history '("configuration.org" "emacs.scm" "*Geiser Guile REPL*" "*Geiser Guile REPL*<2>" "*Geiser Guile REPL*" "home-config.scm" "Libera.Chat" "libe" "Libera.Chat/josh`" "emacs.scm" "home-config.scm" "emacs.scm" "configuration.org" "*vterm*" "*Async Shell Command*" "configuration.orgn" "environment" "*vterm*" "home-config.scm" "configuration.org" "alg1-022125.org" "alg1-022125_per3.org" "alg1-022125.pdf" "alg1-022125.org" "*gnuplot*"))
(setq minibuffer-history '("yes" "geiser-guile" "paredit" "geiser-guile" "geiser" "modus-vivendi" "modus-operandi" "modus-vivendi" "modus-operandi" "modus-vivendi" "0.6" "0.5" "go-translate-3.0.7" "exwm-0.33" "#guix" "yes" "0.6" "magit" "olivetti-20241030.542" "olivetti" "vterm" "bongo-20201002.1020" "bongo" "bongo-20201002.1020" "bongo"))
(setq extended-command-history '("geiser-guile" "geiser" "erc" "paredit-mode" "package-install" "make-directory" "vterm" "read-only-mode" "vterm" "paredit-mode" "package-install" "package-upgrade-all" "package-upgrade" "package-install" "package-delete" "package-install" "geiser" "package-install" "load-theme" "org-beamer-mode" "package-delete" "erc-menu" "erc" "vterm" "package-install"))
(setq file-name-history '("~/guix-project/config/packages/" "~/guix-project/config/packages/emacs.scm" "~/guix-project/config/packages" "~/guix-project/config/" "~/.emacs.d/configuration.org" "~/.emacs.d/configuration.orgn" "/etc/environment" "~/guix-project/config/home-config.scm" "~/guix-project/config/systems/base-system.scm" "~/guix-project/config/" "~/.emacs.d/configuration.org" "~/guix-project/files/.emacs.d/init.el" "~/guix-project/config/home-config.scm" "~/.newsboat/" "~/Documents/org/rssurls.org" "~/guix-project/config/home-config.scm" "~/.emacs.d/configuration.org" "~/Documents/org/sicp.org" "~/.emacs.d/configuration.org" "~/Documents/org/algebra1/alg1-022125_per3.org" "~/Documents/org/algebra1/alg1-022125.org" "~/Documents/org/algebra1/alg1-022125_per3.org" "~/Documents/org/algebra1/alg1-022125.org" "~/Documents/org/algebra1/alg1-021025.org" "~/Documents/org/algebra1/alg1-022125_per3.org"))
